"""
Django settings for boot project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import logging as logger
import logging.config
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
from django.utils.log import DEFAULT_LOGGING

from . import config

BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-3w&ouf$-3br&e==gz8+b0i3l^4_k#4zt0%ksyrnodc*01i&^(7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = eval(config.DEFAULT['debug'])
LOG_LEVEL = os.getenv('DJANGO_LOG_LEVEL', config.DEFAULT['log_level']).upper()

ALLOWED_HOSTS = str(config.DEFAULT['allowed_hosts']).split(',')
HOSTNAME = ALLOWED_HOSTS[0]
SERVER_TYPE = config.SERVER_TYPE

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'drf_yasg',
    'rest_framework',
    'framework.user',
    'tron'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'boot.middleware.RequestLogMiddleware'
]

ROOT_URLCONF = 'boot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'framework/templates',
            BASE_DIR / 'tron/templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'boot.wsgi.application'

AUTH_USER_MODEL = 'user.User'

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

MONGO_HOST = config.MONGODB.get('host')
MONGO_PORT = int(config.MONGODB.get('port'))
MONGO_USER = config.MONGODB.get('user')
MONGO_PASSWORD = config.MONGODB.get('password')
MONGO_AUTH_SOURCE = config.MONGODB.get('auth_source')
MONGO_NAME = config.MONGODB.get('database')
MONGO_TEST_NAME = config.MONGODB.get('test_database')

DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'NAME': MONGO_NAME,
        'CLIENT': {
            'host': MONGO_HOST,
            'port': MONGO_PORT,
            'username': MONGO_USER,
            'password': MONGO_PASSWORD,
            'authSource': MONGO_AUTH_SOURCE,
            'authMechanism': 'SCRAM-SHA-1'
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = config.DEFAULT['lang']

TIME_ZONE = config.DEFAULT['time_zone']

USE_I18N = True
USE_L10N = True
USE_TZ = True

from django.utils.translation import gettext_lazy as _

LANGUAGES = [
    ('ko', _('Korean')),
    ('ja', _('Japanese')),
    ('en', _('English')),
]

LOCALE_PATHS = [BASE_DIR / 'locale', ]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING_CONFIG = None
LOG_FILE = 'logs/%s-%s.log' % (HOSTNAME, SERVER_TYPE)
LOG_FILE_SERVER = 'logs/%s-%s_server.log' % (HOSTNAME, SERVER_TYPE)
logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'default': {
            # exact format is not important, this is the minimum information
            'format': '[%(levelname)-8s] %(asctime)s %(thread)-10s %(name)-12s | %(message)s',
        },
        'django.server': DEFAULT_LOGGING['formatters']['django.server'],
        'user_log': {
            # exact format is not important, this is the minimum information
            'format': '[%(levelname)-8s] %(asctime)s %(thread)-10s | %(message)s',
        },
    },
    'handlers': {
        # console logs to stderr
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'default',
        },
        'django.server': DEFAULT_LOGGING['handlers']['django.server'],
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'default',
            'filename': BASE_DIR / LOG_FILE,
            'maxBytes': 1024 * 1024 * 15,  # 15MB
            'backupCount': 10,
        },
        'file.server': {
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'default',
            'filename': BASE_DIR / LOG_FILE_SERVER,
            'maxBytes': 1024 * 1024 * 15,  # 15MB
            'backupCount': 10,
        },
        'console_userlog': {
            'class': 'logging.StreamHandler',
            'formatter': 'user_log',
        },
    },
    'loggers': {
        # Our application code
        'boot.settings': {
            'level': LOG_LEVEL,
            'handlers': ['console'],
            # Avoid double logging because of root logger
            'propagate': False,
        },
        # Default runserver request logging
        'root': {
            'level': LOG_LEVEL,
            'handlers': ['console_userlog'],
            'propagate': False,
        },
        # 'django.server': DEFAULT_LOGGING['loggers']['django.server'],
        'django.utils.autoreload': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
        'djongo': {
            'level': 'INFO',
            'handlers': ['console'],
            'propagate': False,
        },
        'django.server': {
            'level': 'INFO',
            'handlers': ['console', 'file.server'],
            'propagate': False,
        },
        # default for all undefined Python modules
        '': {
            'level': LOG_LEVEL,
            'handlers': ['console', 'file'],
            'propagate': False,
        },
    },
})

log = logger.getLogger(__name__)
log.info('BASE_DIR: %s' % BASE_DIR)
